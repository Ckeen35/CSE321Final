void main:
  // arrays to hold scores from each section
  int[6] upperSection; // [1's, 2's, 3's, 4's, 5's, 6's]
  int[8] lowerSection; // [3OfAKind, 4OfAKind, fullHouse, smallStraight, largeStraight, yahtzee, chance, multiYahtzee]
  int totalScore;
  
  for i in range 1 to 13:
    
    // array to hold dice values
    int[5] diceRoll
    
    // populate array
    for j in range diceRoll:
      diceRoll[j] = rollDie();
    
    // prompt user to score this roll or reroll
    if(reroll):
      // store which indexes to reroll
      ArrayList<Integer> rerollIndex
      add indices to rerollIndex
      if none selected, warn user
    if(score):
      // have user select which way to score from valid options (all upper section will always be valid unless scored already)
      ArrayList<Integer> validUpperIndex = validUpperScores(upperSection);
      ArrayList<Integer> validLowerIndex = validLowerScores(lowerSection, diceRoll);
      // display these to user
    
    // calculate score from upper section if one of these options is selected
    if(upperIsSelected):
      upperSection = scoreUpper(diceRoll, validUpperIndex[selected]+1, upperSection)
    else if (lowerIsSelected)
      lowerSection = scoreLower(diceRoll, validLowerIndex[selected], lowerSection)
  
  // fill unscored sections at the end of the game with 0
  for i in upperSection:
    if(upperSection[i] == null)
      upperSection[i] = 0
  for i in lowerSection:
    if(lowerSection[i] == null)
      lowerSection[i] = 0
  
  // add up all scores
  // scores for upper section
  for i in upperSection:
    totalScore += upperSection[i]
  // user gets 35 bonus points if they score more than 63 points in the upper section
  if (totalScore > 63)
    totalScore += 35
  // scores for lower section
  for i in lowerSection:
    totalScore += lowerSection[i]
  //game end



// roll a die and return the result
int rollDie():
  int rand = random // roll random number between 1 and 6
  return rand
  
  


// check which scoring options in the upper section are valid
ArrayList<Integer> validUpperScores(upperSection):
  // ArrayList to store valid scoring option indices
  ArrayList<Integer> validUpper
  
  // loop through upperSection and check which options have been scored
  for i in range upperSection:
    // if option hasn't been socred yet, add the index to the valid scoring options
    if (upperSection[i] == null):
      validUpper.add(i);
  // return valid indices
  return validUpper
  
  
  
  
// check which scoring options in the lower section are valid
ArrayList<Integer> validLowerScores(lowerSection, int[] diceRoll):
  
  // initialize ArrayList to store valid indices
  ArrayList<Integer> validLower;
  
  // check how many of each number are in the dice roll
  int[6] numEach = [0, 0, 0, 0, 0, 0]
  
  // check how many of each die number is in the dice roll
  for i in range diceRoll:
    if(diceRoll[i] == 1)
      numEach[0]++
    if(diceRoll[i] == 2)
      numEach[1]++
    if(diceRoll[i] == 3)
      numEach[2]++
    if(diceRoll[i] == 4)
      numEach[3]++
    if(diceRoll[i] == 5)
      numEach[4]++
    if(diceRoll[i]== 6)
      numEach[5]++
    
    // check which scoring options are valid
    if(lowerSection[0] == null && contains(numEach, 3) != -1):
      validLower.add(0) // three of a kind is valid
    if(lowerSection[1] == null && contains(numEach, 4) != -1):
      validLower.add(1) // four of a kind is valid
    if(lowerSection[2] == null && contains(numEach, 3) != -1 && contains(numEach, 2) != -1):
      validLower.add(2) // full house is valid
    if(lowerSection[3] == null && longestSequence(diceRoll) == 4):
      validLower.add(3) // small straight is valid
    if(lowerSection[4] == null && longestSequence(diceRoll) == 5):
      validLower.add(4) // large straight is valid
    if(lowerSection[5] == null && conatins(numEach, 5) != -1):
      validLower.add(5) // yahtzee is valid
    if(lowerSection[6] == null):
      validLower.add(6) // chance is valid
    if(lowerSection[5] != null && conatins(numEach, 5) != -1)
      validLower.add(7) // bonus yahtzee is valid
      
    return validLower
    
      
  
  

// return index of value in array, otherwise return -1;  
int contains(int[] arr, int value):  
  for i in arr:
    if (arr[i] == value):
      return i
  return -1




// check what the longest streak in the diceRoll is
int longestSequence(diceRoll):
  int longestStreak = 0;

  for (int num : diceRoll):
      int currentNum = num;
      int currentStreak = 1;

      while (arrayContains(diceRoll, currentNum + 1)) {
          currentNum += 1;
          currentStreak += 1;
      }

      longestStreak = Math.max(longestStreak, currentStreak);
  }

  return longestStreak;
  
  
  
  
// calculate score for upper section option based on diceroll and which option
int[] scoreUpper(int[] diceRoll, int option, int[] upperSection) {
  int[6] result = upperSection

  // check how many of each number are in the dice roll
  int[6] numEach = [0, 0, 0, 0, 0, 0]

  // check how many of each die number is in the dice roll
  for i in range diceRoll:
    if(diceRoll[i] == 1)
      numEach[0]++
    if(diceRoll[i] == 2)
      numEach[1]++
    if(diceRoll[i] == 3)
      numEach[2]++
    if(diceRoll[i] == 4)
      numEach[3]++
    if(diceRoll[i] == 5)
      numEach[4]++
    if(diceRoll[i]== 6)
      numEach[5]++

  // check which option is selected and calculate score
  if(option == 1) // 1's
    result[option - 1] = numEach[option - 1] * 1
  if(option == 2) // 2's
    result[option - 1] = numEach[option - 1] * 2
  if(option == 3) // 3's
    result[option - 1] = numEach[option - 1] * 3
  if(option == 4) // 4's
    result[option - 1] = numEach[option - 1] * 4
  if(option == 5) // 5's
    result[option - 1] = numEach[option - 1] * 5
  if(option == 6) // 6's
    result[option - 1] = numEach[option - 1] * 6

  return result
}
  
  
  
  
// calculate score for lower section based on diceroll and which option is selected
int[] scoreLower(int[] diceRoll, int option, int[] lowerSection):
  int[] result = lowerSection
  // check which option to score
  if(option == 0) // 3 of a kind
    int tot = 0
    for i in diceRoll:
      tot += diceRoll[i]
    result[option] = tot
  if(option == 1) // 4 of a kind
    int tot = 0
    for i in diceRoll:
      tot += diceRoll[i]
    result[option] = tot
  if(option == 2) // full house
    result[option] = 25
  if(option == 3) // small straight
    result[option] = 30
  if(option == 4) // large straight
    result[option] = 40
  if(option == 5) // Yahtzee
    result[option] = 50
  if(option == 6) // chance
    int tot = 0
    for i in diceRoll:
      tot += diceRoll[i]
    result[option] = tot
  if(option == 7) // multiple Yahtzee
    result[option] += 100
  
  return result;
  
  
  
  
  
  
  
  
  
